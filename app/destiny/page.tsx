import type { Metadata } from "next";
import DestinyForm from "./DestinyForm";
import {
  Card,
  CardContent,
  CardHeader,
  CardDescription,
  CardTitle,
} from "@/components/ui/card";
import { getTranslations } from "@/i18n/server";
import DestinyResultClient from "./DestinyResultClient";
import { createSEOMetadata } from "@/lib/seo/metadata";
import { getBaseUrl } from "@/lib/infra/utils";

export const dynamic = "force-dynamic";

export async function generateMetadata({
  searchParams,
  params: { locale },
}: {
  searchParams: { [key: string]: string | string[] | undefined };
  params: { locale: string };
}): Promise<Metadata> {
  const { t } = await getTranslations(["common"]);
  const baseUrl = getBaseUrl();

  const id = searchParams?.id as string;
  const name = searchParams?.name as string;

  if (id && name) {
    return createSEOMetadata({
      title: `V·∫≠n M·ªánh C·ªßa ${name} - B√≥c M·ªánh | Ph√¢n T√≠ch Chi Ti·∫øt S·ªë M·ªánh`,
      description: `üîÆ Kh√°m ph√° v·∫≠n m·ªánh chi ti·∫øt c·ªßa ${name} qua AI b√≥i to√°n. Ph√¢n t√≠ch t√≠nh c√°ch, s·ª± nghi·ªáp, t√¨nh y√™u, t√†i l·ªôc v√† l·ªùi khuy√™n phong th·ªßy c√° nh√¢n h√≥a.`,
      keywords: `v·∫≠n m·ªánh ${name}, b√≥c m·ªánh c√° nh√¢n, ph√¢n t√≠ch s·ªë m·ªánh, t·ª≠ vi ${name}, AI b√≥i to√°n, kh√°m ph√° b·∫£n th√¢n`,
      ogImage: "/og-destiny-result.jpg",
      canonicalUrl: `${baseUrl}/destiny?id=${id}`,
      alternateLanguages: {
        vi: `${baseUrl}/destiny?id=${id}`,
        en: `${baseUrl}/destiny?id=${id}`,
      },
    });
  }

  return createSEOMetadata({
    title: "B√≥c M·ªánh C√° Nh√¢n - AI Ph√¢n T√≠ch V·∫≠n M·ªánh Qua Ng√†y Sinh | B√≥c M·ªánh",
    description: "üåü Kh√°m ph√° v·∫≠n m·ªánh c·ªßa b·∫°n v·ªõi AI b√≥i to√°n ch√≠nh x√°c nh·∫•t! Nh·∫≠p th√¥ng tin ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√≠nh c√°ch, s·ª± nghi·ªáp, t√¨nh y√™u, t√†i l·ªôc v√† l·ªùi khuy√™n phong th·ªßy.",
    keywords: "b√≥c m·ªánh c√° nh√¢n, xem v·∫≠n m·ªánh, AI b√≥i to√°n, ph√¢n t√≠ch ng√†y sinh, t·ª≠ vi online, kh√°m ph√° b·∫£n th√¢n, s·ªë m·ªánh c√° nh√¢n, phong th·ªßy c√° nh√¢n",
    ogImage: "/og-destiny.jpg",
    canonicalUrl: `${baseUrl}/destiny`,
    alternateLanguages: {
      vi: `${baseUrl}/destiny`,
      en: `${baseUrl}/destiny`,
    },
  });
}

// async function getRecommendedProductsForDestiny(
//   destiny: DestinyResult | null
// ): Promise<Product[]> {
//   const { t } = await getTranslations(["common", "attributes"]);
//   if (!destiny?.success || !destiny.data) {
//     return [];
//   }

//   const elementToMatch = destiny.element?.toLowerCase();
//   const allProducts = await getProducts(); // Assuming getProducts can be filtered or fetches all

//   if (elementToMatch) {
//     const translatedElementKey = `attributes.m·ªánh.${destiny.element}`; // e.g. attributes.m·ªánh.Kim
//     const translatedElement = t(
//       translatedElementKey,
//       destiny.element as string
//     ); // Fallback to original if no translation

//     const filteredByElement = allProducts.filter(
//       (p) =>
//         p.attributes.some(
//           (attr) =>
//             attr.type === "m·ªánh" &&
//             (attr.value.toLowerCase() === elementToMatch ||
//               t(`attributes.m·ªánh.${attr.value}`, attr.value).toLowerCase() ===
//                 translatedElement.toLowerCase())
//         ) ||
//         p.categories.some((cat) => cat.toLowerCase().includes(elementToMatch!))
//     );
//     if (filteredByElement.length > 0) return filteredByElement.slice(0, 3);
//   }

//   const fallbackCategories = [
//     t("attributes.m·ª•c ƒë√≠ch.B√¨nh An"),
//     t("attributes.m·ª•c ƒë√≠ch.May M·∫Øn"),
//     t("attributes.m·ª•c ƒë√≠ch.T√†i L·ªôc"),
//   ];
//   const fallbackProducts = allProducts.filter((p) =>
//     p.categories.some((cat) => fallbackCategories.includes(cat))
//   );
//   return fallbackProducts.slice(0, 3);
// }

interface DestinyResult {
  id: string;
  result: string;
  input: any;
  preData: any;
}

export default async function DestinyPage({
  searchParams,
}: {
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  const { t } = await getTranslations(["common"]);
  const baseUrl = getBaseUrl();

  const id = searchParams?.id as string | undefined;

  // Structured data cho trang destiny
  const destinyStructuredData = {
    "@context": "https://schema.org",
    "@type": "WebPage",
    name: id ? "K·∫øt Qu·∫£ B√≥c M·ªánh C√° Nh√¢n" : "B√≥c M·ªánh C√° Nh√¢n",
    description: id ? "Xem k·∫øt qu·∫£ ph√¢n t√≠ch v·∫≠n m·ªánh chi ti·∫øt" : "Kh√°m ph√° v·∫≠n m·ªánh c·ªßa b·∫°n v·ªõi AI b√≥i to√°n",
    url: `${baseUrl}/destiny${id ? `?id=${id}` : ''}`,
    mainEntity: {
      "@type": "Service",
      name: "D·ªãch v·ª• B√≥c M·ªánh C√° Nh√¢n",
      description: "Ph√¢n t√≠ch v·∫≠n m·ªánh, t√≠nh c√°ch v√† t∆∞∆°ng lai qua ng√†y sinh v·ªõi AI",
      provider: {
        "@type": "Organization",
        name: "B√≥c M·ªánh"
      },
      serviceType: "Fortune Telling",
      areaServed: "VN",
      offers: {
        "@type": "Offer",
        price: "0",
        priceCurrency: "VND",
        description: "D·ªãch v·ª• b√≥c m·ªánh mi·ªÖn ph√≠ c∆° b·∫£n"
      }
    },
    breadcrumb: {
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "Trang ch·ªß",
          item: baseUrl,
        },
        {
          "@type": "ListItem",
          position: 2,
          name: "B√≥c M·ªánh",
          item: `${baseUrl}/destiny`,
        },
      ],
    },
  };

  return (
    <>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(destinyStructuredData),
        }}
      />
      <main className="min-h-screen pt-24 pb-16 bg-gradient-to-b from-gray-950 via-slate-900 text-gray-100">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-6">
          <Card
            className={`w-full ${
              !id ? "max-w-lg" : ""
            } mx-auto bg-gray-900/80 border-yellow-500/30 shadow-xl backdrop-blur-sm`}
          >
            <CardHeader className="text-center">
              <CardTitle className="text-3xl font-bold bg-gradient-to-r from-yellow-400 via-amber-500 to-yellow-600 bg-clip-text text-transparent">
                {t("common:destiny.form.title")}
              </CardTitle>
              <CardDescription className="text-gray-300 mt-1 text-left">
                <i>{t("common:features.destiny.description")}</i>
              </CardDescription>
            </CardHeader>
            <CardContent>
              {!id ? <DestinyForm /> : <DestinyResultClient id={id} />}
            </CardContent>
          </Card>
        </div>
      </main>
    </>
  );
}

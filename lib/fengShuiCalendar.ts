// Feng Shui Calendar calculation utilities
export interface EventType {
  id: string
  name: string
  description: string
  icon: string
}

export interface CalendarDay {
  date: number
  lunarDate: string
  canChi: string
  truc: string
  star: string
  score: number
  rating: "excellent" | "good" | "fair" | "poor"
  reasons: string[]
  bestTimes: string[]
}

export interface CalendarAnalysis {
  month: number
  year: number
  eventType: string
  personalKua: number
  days: CalendarDay[]
  topDays: CalendarDay[]
  monthAnalysis: {
    canChi: string
    trucInfluence: string
    starInfluence: string
    generalAdvice: string[]
  }
}

// Event types
export const eventTypes: EventType[] = [
  { id: "wedding", name: "K·∫øt h√¥n", description: "Ng√†y c∆∞·ªõi h·ªèi, l·ªÖ ƒÉn h·ªèi", icon: "üíí" },
  { id: "business", name: "Khai tr∆∞∆°ng", description: "M·ªü c·ª≠a h√†ng, c√¥ng ty m·ªõi", icon: "üè™" },
  { id: "moving", name: "Chuy·ªÉn nh√†", description: "D·ªçn nh√†, chuy·ªÉn vƒÉn ph√≤ng", icon: "üè†" },
  { id: "travel", name: "Du l·ªãch", description: "Kh·ªüi h√†nh ƒëi xa, c√¥ng t√°c", icon: "‚úàÔ∏è" },
  { id: "investment", name: "ƒê·∫ßu t∆∞", description: "Mua b√°n, k√Ω h·ª£p ƒë·ªìng l·ªõn", icon: "üí∞" },
  { id: "surgery", name: "Ph·∫´u thu·∫≠t", description: "Can thi·ªáp y t·∫ø quan tr·ªçng", icon: "üè•" },
  { id: "study", name: "H·ªçc t·∫≠p", description: "B·∫Øt ƒë·∫ßu kh√≥a h·ªçc, thi c·ª≠", icon: "üìö" },
  { id: "meeting", name: "H·ªçp m·∫∑t", description: "T·ªï ch·ª©c s·ª± ki·ªán, ti·ªác t√πng", icon: "üéâ" },
  { id: "haircut", name: "C·∫Øt t√≥c", description: "Thay ƒë·ªïi di·ªán m·∫°o", icon: "‚úÇÔ∏è" },
  { id: "shopping", name: "Mua s·∫Øm", description: "Mua ƒë·ªì quan tr·ªçng, xe c·ªô", icon: "üõçÔ∏è" },
  { id: "prayer", name: "C·∫ßu nguy·ªán", description: "L·ªÖ b√°i, c√∫ng ki·∫øn", icon: "üôè" },
  { id: "other", name: "Kh√°c", description: "C√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát kh√°c", icon: "‚≠ê" },
]

// Heavenly Stems and Earthly Branches
const heavenlyStems = ["Gi√°p", "·∫§t", "B√≠nh", "ƒêinh", "M·∫≠u", "K·ª∑", "Canh", "T√¢n", "Nh√¢m", "Qu√Ω"]
const earthlyBranches = ["T√Ω", "S·ª≠u", "D·∫ßn", "M√£o", "Th√¨n", "T·ªµ", "Ng·ªç", "M√πi", "Th√¢n", "D·∫≠u", "Tu·∫•t", "H·ª£i"]

// 12 Truc (12 Officers)
const trucNames = ["Ki·∫øn", "Tr·ª´", "M√£n", "B√¨nh", "ƒê·ªãnh", "Ch·∫•p", "Ph√°", "Nguy", "Th√†nh", "Thu", "Khai", "B·∫ø"]

// 28 Stars
const stars = [
  "Gi√°c",
  "Cang",
  "ƒê√™",
  "Ph√≤ng",
  "T√¢m",
  "Vƒ©",
  "C∆°",
  "ƒê·∫©u",
  "Ng∆∞u",
  "N·ªØ",
  "H∆∞",
  "Nguy",
  "Th·∫•t",
  "B√≠ch",
  "Khu√™",
  "L√¢u",
  "V·ªã",
  "M√£o",
  "T·∫•t",
  "Ch·ªßy",
  "S√¢m",
  "T·ªânh",
  "Qu·ª∑",
  "Li·ªÖu",
  "Tinh",
  "Tr∆∞∆°ng",
  "D·ª±c",
  "Ch·∫©n",
]

// Calculate Kua number
export function calculateKua(birthYear: number, gender: "male" | "female"): number {
  const lastTwoDigits = birthYear % 100
  const sum = Math.floor(lastTwoDigits / 10) + (lastTwoDigits % 10)
  const finalSum = sum > 9 ? Math.floor(sum / 10) + (sum % 10) : sum

  if (gender === "male") {
    const kua = 11 - finalSum
    return kua === 5 ? 2 : kua > 9 ? kua - 9 : kua
  } else {
    const kua = finalSum + 4
    return kua === 5 ? 8 : kua > 9 ? kua - 9 : kua
  }
}

// Get Can Chi for a date
function getCanChi(year: number, month: number, day: number): string {
  // Simplified Can Chi calculation
  const baseDate = new Date(1900, 0, 31) // Reference date
  const currentDate = new Date(year, month - 1, day)
  const daysDiff = Math.floor((currentDate.getTime() - baseDate.getTime()) / (1000 * 60 * 60 * 24))

  const stemIndex = (daysDiff + 6) % 10 // +6 for adjustment
  const branchIndex = (daysDiff + 8) % 12 // +8 for adjustment

  return `${heavenlyStems[stemIndex]} ${earthlyBranches[branchIndex]}`
}

// Get Truc for a date
function getTruc(day: number): string {
  return trucNames[(day - 1) % 12]
}

// Get Star for a date
function getStar(day: number): string {
  return stars[(day - 1) % 28]
}

// Calculate day score based on multiple factors
function calculateDayScore(
  day: number,
  month: number,
  year: number,
  eventType: string,
  personalKua: number,
): { score: number; reasons: string[]; bestTimes: string[] } {
  const reasons: string[] = []
  let score = 50 // Base score

  // Can Chi influence (25%)
  const canChi = getCanChi(year, month, day)
  const canChiScore = Math.random() * 30 + 40 // 40-70
  score += (canChiScore - 50) * 0.25
  if (canChiScore > 60) reasons.push(`Can Chi ${canChi} h·ª£p v·ªõi s·ª± ki·ªán`)

  // Truc influence (25%)
  const truc = getTruc(day)
  const trucScore = getTrucScore(truc, eventType)
  score += (trucScore - 50) * 0.25
  if (trucScore > 60) reasons.push(`Tr·ª±c ${truc} thu·∫≠n l·ª£i`)

  // Star influence (20%)
  const star = getStar(day)
  const starScore = getStarScore(star, eventType)
  score += (starScore - 50) * 0.2
  if (starScore > 60) reasons.push(`Sao ${star} chi·∫øu m·ªánh`)

  // Personal Kua influence (30%)
  const kuaScore = getKuaCompatibility(personalKua, day)
  score += (kuaScore - 50) * 0.3
  if (kuaScore > 60) reasons.push(`H·ª£p v·ªõi s·ªë Kua ${personalKua}`)

  // Best times of day
  const bestTimes = getBestTimes(day, eventType)

  return {
    score: Math.max(0, Math.min(100, Math.round(score))),
    reasons,
    bestTimes,
  }
}

// Get Truc score for event type
function getTrucScore(truc: string, eventType: string): number {
  const trucScores: { [key: string]: { [key: string]: number } } = {
    Ki·∫øn: { wedding: 85, business: 90, moving: 70, travel: 80 },
    Tr·ª´: { wedding: 30, business: 40, moving: 85, travel: 60 },
    M√£n: { wedding: 95, business: 70, moving: 50, travel: 40 },
    B√¨nh: { wedding: 80, business: 85, moving: 80, travel: 85 },
    ƒê·ªãnh: { wedding: 90, business: 95, moving: 60, travel: 70 },
    Ch·∫•p: { wedding: 40, business: 30, moving: 40, travel: 30 },
    Ph√°: { wedding: 20, business: 25, moving: 30, travel: 35 },
    Nguy: { wedding: 25, business: 20, moving: 25, travel: 20 },
    Th√†nh: { wedding: 85, business: 90, moving: 85, travel: 80 },
    Thu: { wedding: 70, business: 80, moving: 75, travel: 85 },
    Khai: { wedding: 80, business: 85, moving: 90, travel: 90 },
    B·∫ø: { wedding: 35, business: 30, moving: 35, travel: 40 },
  }

  return trucScores[truc]?.[eventType] || 50
}

// Get Star score for event type
function getStarScore(star: string, eventType: string): number {
  // Simplified star scoring
  const goodStars = ["Gi√°c", "Cang", "Ph√≤ng", "T√¢m", "ƒê·∫©u", "Ng∆∞u", "Khu√™", "L√¢u", "T·ªânh", "Tinh"]
  const badStars = ["ƒê√™", "Vƒ©", "C∆°", "H∆∞", "Nguy", "V·ªã", "Ch·ªßy", "Qu·ª∑", "Li·ªÖu"]

  if (goodStars.includes(star)) return Math.random() * 20 + 70 // 70-90
  if (badStars.includes(star)) return Math.random() * 30 + 20 // 20-50
  return Math.random() * 30 + 50 // 50-80
}

// Get Kua compatibility score
function getKuaCompatibility(kua: number, day: number): number {
  // Simplified Kua compatibility based on day
  const kuaScores = [85, 75, 65, 55, 45, 55, 65, 75, 85]
  return kuaScores[(day + kua - 2) % 9] || 50
}

// Get best times for the day
function getBestTimes(day: number, eventType: string): string[] {
  const times = ["5:00-7:00", "7:00-9:00", "9:00-11:00", "11:00-13:00", "13:00-15:00", "15:00-17:00"]
  const selectedTimes = []

  // Select 2-3 best times based on day and event
  const startIndex = (day + eventType.length) % times.length
  selectedTimes.push(times[startIndex])
  selectedTimes.push(times[(startIndex + 2) % times.length])

  if (Math.random() > 0.5) {
    selectedTimes.push(times[(startIndex + 4) % times.length])
  }

  return selectedTimes
}

// Get rating based on score
function getRating(score: number): "excellent" | "good" | "fair" | "poor" {
  if (score >= 85) return "excellent"
  if (score >= 70) return "good"
  if (score >= 50) return "fair"
  return "poor"
}

// Main analysis function
export function analyzeFengShuiCalendar(
  eventType: string,
  birthYear: number,
  gender: "male" | "female",
  month: number,
  year: number,
): CalendarAnalysis {
  const personalKua = calculateKua(birthYear, gender)
  const daysInMonth = new Date(year, month, 0).getDate()
  const days: CalendarDay[] = []

  // Analyze each day of the month
  for (let day = 1; day <= daysInMonth; day++) {
    const canChi = getCanChi(year, month, day)
    const truc = getTruc(day)
    const star = getStar(day)
    const { score, reasons, bestTimes } = calculateDayScore(day, month, year, eventType, personalKua)

    days.push({
      date: day,
      lunarDate: `${day}/${month}`, // Simplified lunar date
      canChi,
      truc,
      star,
      score,
      rating: getRating(score),
      reasons,
      bestTimes,
    })
  }

  // Get top 5 days
  const topDays = [...days].sort((a, b) => b.score - a.score).slice(0, 5)

  // Month analysis
  const monthCanChi = getCanChi(year, month, 15) // Mid-month reference
  const monthAnalysis = {
    canChi: monthCanChi,
    trucInfluence: `Th√°ng ${month} ch·ªãu ·∫£nh h∆∞·ªüng c·ªßa c√°c tr·ª±c xoay v√≤ng, c·∫ßn ch·ªçn ng√†y c√≥ tr·ª±c t·ªët`,
    starInfluence: `28 sao lu√¢n phi√™n chi·∫øu m·ªánh, ·∫£nh h∆∞·ªüng ƒë·∫øn v·∫≠n kh√≠ t·ª´ng ng√†y`,
    generalAdvice: [
      `Th√°ng ${month}/${year} t·ªïng th·ªÉ thu·∫≠n l·ª£i cho s·ª± ki·ªán ${eventTypes.find((e) => e.id === eventType)?.name}`,
      `N√™n ch·ªçn nh·ªØng ng√†y c√≥ ƒëi·ªÉm s·ªë cao v√† tr·ª±c t·ªët`,
      `Tr√°nh nh·ªØng ng√†y c√≥ sao x·∫•u v√† tr·ª±c kh√¥ng ph√π h·ª£p`,
      `K·∫øt h·ª£p v·ªõi s·ªë Kua c√° nh√¢n ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t`,
    ],
  }

  return {
    month,
    year,
    eventType,
    personalKua,
    days,
    topDays,
    monthAnalysis,
  }
}

// Email service utility (using a mock service for demo)
// In production, use services like SendGrid, AWS SES, or Nodemailer

interface EmailOptions {
  to: string
  subject: string
  html: string
  text?: string
}

// Mock email service for demo purposes
class MockEmailService {
  private sentEmails: Array<{
    to: string
    subject: string
    html: string
    sentAt: Date
  }> = []

  async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      // Simulate email sending delay
      await new Promise((resolve) => setTimeout(resolve, 1000))

      // Store email for demo purposes
      this.sentEmails.push({
        to: options.to,
        subject: options.subject,
        html: options.html,
        sentAt: new Date(),
      })

      console.log("üìß Email sent (DEMO MODE):", {
        to: options.to,
        subject: options.subject,
      })

      return true
    } catch (error) {
      console.error("Email sending failed:", error)
      return false
    }
  }

  // Demo method to view sent emails
  getSentEmails() {
    return this.sentEmails
  }

  // Demo method to clear sent emails
  clearSentEmails() {
    this.sentEmails = []
  }
}

export const emailService = new MockEmailService()

export function generatePasswordResetEmail(name: string, resetLink: string): string {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - B√≥c M·ªánh</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
        .button { display: inline-block; background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; margin: 20px 0; }
        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        .warning { background: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 5px; margin: 20px 0; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üîÆ B√≥c M·ªánh</h1>
          <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        </div>
        <div class="content">
          <p>Xin ch√†o <strong>${name}</strong>,</p>
          
          <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n B√≥c M·ªánh c·ªßa b·∫°n.</p>
          
          <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>
          
          <div style="text-align: center;">
            <a href="${resetLink}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
          </div>
          
          <div class="warning">
            <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
            <ul>
              <li>Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>15 ph√∫t</strong></li>
              <li>Ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c <strong>1 l·∫ßn</strong></li>
              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
            </ul>
          </div>
          
          <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy link sau v√†o tr√¨nh duy·ªát:</p>
          <p style="word-break: break-all; background: #e5e7eb; padding: 10px; border-radius: 5px; font-family: monospace;">
            ${resetLink}
          </p>
          
          <p>Tr√¢n tr·ªçng,<br>
          <strong>ƒê·ªôi ng≈© B√≥c M·ªánh</strong></p>
        </div>
        <div class="footer">
          <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
          <p>¬© 2024 B√≥c M·ªánh. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
      </div>
    </body>
    </html>
  `
}
